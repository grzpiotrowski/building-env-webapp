<div class="ui segment" id="chartTemperature"></div>
<div class="ui segment" id="chartHumidity"></div>

<script>

  const formatDatetimeIsoString = (dateString) => {
    const date = new Date(dateString);
    let day = String(date.getDate()).padStart(2, '0');
    let month = String(date.getMonth()+1).padStart(2, '0');
    let year = String(date.getFullYear());
    let hours = String(date.getHours()).padStart(2, '0');
    let minutes = String(date.getMinutes()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  }  

  const getJsonData = async (apiEndPoint) => {
    const response = await fetch(apiEndPoint);
    const myJson = await response.json(); //extract JSON from the http response
    return myJson;
  }

  const getDataPerSensor = (jsonData) => {
    const humidityData = jsonData;
    // Get an array of unique deviceIds in the data
    let devices = Array.from(new Set(humidityData.map(({ deviceId }) => deviceId)));
    let sensorsData = [];
    devices.forEach(deviceId => {
      sensorsData.push(humidityData.filter(obj => obj.deviceId === deviceId));
    });
    return sensorsData
  }

  const main = async () => {
    const humidityData = await getJsonData('/api/humidityreadings').then( (humidityData) => {
      const sensorsData = getDataPerSensor(humidityData);

      let dates = [];
      let humidityDatasets = [];

      sensorsData[0].forEach(reading => {
        dates.push(formatDatetimeIsoString(reading._time));
      });

      sensorsData.forEach(sensor => {
        let humidityValues = [];
        sensor.forEach(reading =>{
          if (reading._value) {
            humidityValues.push(reading._value.toFixed(1));
          } else { humidityValues.push(reading._value); }
        });
        humidityDatasets.push({name: sensor[0].deviceId, type: "line",
                              values: humidityValues
                              });
      });

      const humidityChartData = {
        labels: dates,
        datasets: humidityDatasets
      };

      const humidityChart = new frappe.Chart("#chartHumidity", {
        title: "Humidity",
        data: humidityChartData,
        type: 'line',
        lineOptions: {
          regionFill: 1,
          hideDots: 1
        },
        axisOptions: {
          xIsSeries: true
        },
        height: 450,
      });
    });

  const temperatureData = await getJsonData('/api/temperaturereadings').then( (temperatureData) => {
      const sensorsData = getDataPerSensor(temperatureData);

      let dates = [];
      let temperatureDatasets = [];

      sensorsData[0].forEach(reading => {
        dates.push(formatDatetimeIsoString(reading._time));
      });

      sensorsData.forEach(sensor => {
        let temperatureValues = [];
        sensor.forEach(reading =>{
          if (reading._value) {
            temperatureValues.push(reading._value.toFixed(1));
          } else { temperatureValues.push(reading._value); }
        });
        temperatureDatasets.push({name: sensor[0].deviceId, type: "line",
                              values: temperatureValues
                              });
      });

      const temperatureChartData = {
        labels: dates,
        datasets: temperatureDatasets
      };

      const temperatureChart = new frappe.Chart("#chartTemperature", {
        title: "Temperature",
        data: temperatureChartData,
        type: 'line',
        lineOptions: {
          regionFill: 1,
          hideDots: 1
        },
        axisOptions: {
          xIsSeries: true
        },
        height: 450,
      });
    });

  }

  main();

</script>